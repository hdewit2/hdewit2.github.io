<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<!-- Author: Hank de Wit -->
<!-- Version: 2.0 25 Nov 2020 -->
<!-- Comment: This is based on a version I wrote while working for the Australian Bureau of Meteorology -->
<HTML>
<HEAD>
<TITLE>SA Country Fire Service (CFS) - Geographic Coordinate Converter</TITLE>
<!-- meta name='viewport' content='initial-scale=2,maximum-scale=2,user-scalable=no' -->
<meta name='viewport' content='width=device-width, initial-scale=1' />
<script src='https://api.mapbox.com/mapbox.js/v3.3.1/mapbox.js'></script>
<link href='https://api.mapbox.com/mapbox.js/v3.3.1/mapbox.css' rel='stylesheet' />
<style type="text/css">
table.main {
	border-width: 0px;
	border-style: outset;
	border-color: gray;
	border-collapse: separate;
	background-color: white;
}
th.main {
	border-width: 0px;
	padding: 1px;
	border-style: hidden;
	border-color: gray;
	background-color: white;
}
td.main {
	border-width: 0px;
	padding: 1px;
	border-style: hidden;
	background-color: white;
}
th.cfs {
	border-width: 0px;
	padding: 1px;
	border-style: hidden;
	border-color: #cccc66;
	background-color: #cccc66;
}
td.cfs {
	border-width: 0px;
	padding: 1px;
	border-style: hidden;
	border-color: #cccc66;
	background-color: #cccc99;
}
th.utm {
	border-width: 0px;
	padding: 1px;
	border-style: hidden;
	border-color: #558855;
	background-color: #558855;
}
td.utm {
	border-width: 0px;
	padding: 1px;
	border-style: hidden;
	border-color: #99aa88;
	background-color: #99aa88;
}

</style>
<SCRIPT TYPE="text/javascript">
    <!--
	var cfs_map_book = {};
	// cfsmapbook["1"] = [54,57,57,4,4];

    /* Copyright 1997-1998 by Charles L. Taylor */
    var pi = 3.14159265358979;

    /* Ellipsoid model constants (actual values here are for WGS84) */
    var sm_a = 6378137.0;
    var sm_b = 6356752.314;
    var sm_EccSquared = 6.69437999013e-03;

    var UTMScaleFactor = 0.9996;

    function load_map_book()
	{
        var txtFile = new XMLHttpRequest();
		/* txtFile.open("GET", "http://web.bom.gov.au/sa/forecasting/cfs_map_book.txt", true); */
		txtFile.open("GET", "cfs_map_book.txt", true);
		txtFile.onreadystatechange = function()
		{
		  if (txtFile.readyState === 4) // Makes sure the document is ready to parse.
		  {
			if (txtFile.status === 200) // Makes sure it's found the file.
			{
			  allText = txtFile.responseText;
			  lines = txtFile.responseText.split("\n"); // Will separate each line into an array
              for (i=0; i<lines.length; i++)
              {
 			    var values = lines[i].split("\t");
				//           Map No        Zone       Northing Min   Northing Max   Easting Min	  Easting Max
			    cfs_map_book[values[0]] = [values[1], values[2],     values[3],     values[4],    values[5]];
			  }
			}
		  }
	    }
		txtFile.send(null);

	    // move marker
        marker.setLatLng(new L.LatLng(document.getElementById("txtLatitude").value,document.getElementById("txtLongitude").value),{draggable:'true'});
        map.panTo(new L.LatLng(document.getElementById("txtLatitude").value,document.getElementById("txtLongitude").value))

        return true;
    }

    /*
    * DegToRad
    *
    * Converts degrees to radians.
    *
    */
    function DegToRad (deg)
    {
        return (deg / 180.0 * pi)
    }

    /*
    * RadToDeg
    *
    * Converts radians to degrees.
    *
    */
    function RadToDeg (rad)
    {
        return (rad / pi * 180.0)
    }

    /*
    * ArcLengthOfMeridian
    *
    * Computes the ellipsoidal distance from the equator to a point at a
    * given latitude.
    *
    * Reference: Hoffmann-Wellenhof, B., Lichtenegger, H., and Collins, J.,
    * GPS: Theory and Practice, 3rd ed.  New York: Springer-Verlag Wien, 1994.
    *
    * Inputs:
    *     phi - Latitude of the point, in radians.
    *
    * Globals:
    *     sm_a - Ellipsoid model major axis.
    *     sm_b - Ellipsoid model minor axis.
    *
    * Returns:
    *     The ellipsoidal distance of the point from the equator, in meters.
    *
    */
    function ArcLengthOfMeridian (phi)
    {
        var alpha, beta, gamma, delta, epsilon, n;
        var result;

        /* Precalculate n */
        n = (sm_a - sm_b) / (sm_a + sm_b);

        /* Precalculate alpha */
        alpha = ((sm_a + sm_b) / 2.0)
           * (1.0 + (Math.pow (n, 2.0) / 4.0) + (Math.pow (n, 4.0) / 64.0));

        /* Precalculate beta */
        beta = (-3.0 * n / 2.0) + (9.0 * Math.pow (n, 3.0) / 16.0)
           + (-3.0 * Math.pow (n, 5.0) / 32.0);

        /* Precalculate gamma */
        gamma = (15.0 * Math.pow (n, 2.0) / 16.0)
            + (-15.0 * Math.pow (n, 4.0) / 32.0);

        /* Precalculate delta */
        delta = (-35.0 * Math.pow (n, 3.0) / 48.0)
            + (105.0 * Math.pow (n, 5.0) / 256.0);

        /* Precalculate epsilon */
        epsilon = (315.0 * Math.pow (n, 4.0) / 512.0);

    /* Now calculate the sum of the series and return */
    result = alpha
        * (phi + (beta * Math.sin (2.0 * phi))
            + (gamma * Math.sin (4.0 * phi))
            + (delta * Math.sin (6.0 * phi))
            + (epsilon * Math.sin (8.0 * phi)));

    return result;
    }

    /*
    * UTMCentralMeridian
    *
    * Determines the central meridian for the given UTM zone.
    *
    * Inputs:
    *     zone - An integer value designating the UTM zone, range [1,60].
    *
    * Returns:
    *   The central meridian for the given UTM zone, in radians, or zero
    *   if the UTM zone parameter is outside the range [1,60].
    *   Range of the central meridian is the radian equivalent of [-177,+177].
    *
    */
    function UTMCentralMeridian (zone)
    {
        var cmeridian;

        cmeridian = DegToRad (-183.0 + (zone * 6.0));

        return cmeridian;
    }

    /*
    * FootpointLatitude
    *
    * Computes the footpoint latitude for use in converting transverse
    * Mercator coordinates to ellipsoidal coordinates.
    *
    * Reference: Hoffmann-Wellenhof, B., Lichtenegger, H., and Collins, J.,
    *   GPS: Theory and Practice, 3rd ed.  New York: Springer-Verlag Wien, 1994.
    *
    * Inputs:
    *   y - The UTM northing coordinate, in meters.
    *
    * Returns:
    *   The footpoint latitude, in radians.
    *
    */
    function FootpointLatitude (y)
    {
        var y_, alpha_, beta_, gamma_, delta_, epsilon_, n;
        var result;

        /* Precalculate n (Eq. 10.18) */
        n = (sm_a - sm_b) / (sm_a + sm_b);

        /* Precalculate alpha_ (Eq. 10.22) */
        /* (Same as alpha in Eq. 10.17) */
        alpha_ = ((sm_a + sm_b) / 2.0)
            * (1 + (Math.pow (n, 2.0) / 4) + (Math.pow (n, 4.0) / 64));

        /* Precalculate y_ (Eq. 10.23) */
        y_ = y / alpha_;

        /* Precalculate beta_ (Eq. 10.22) */
        beta_ = (3.0 * n / 2.0) + (-27.0 * Math.pow (n, 3.0) / 32.0)
            + (269.0 * Math.pow (n, 5.0) / 512.0);

        /* Precalculate gamma_ (Eq. 10.22) */
        gamma_ = (21.0 * Math.pow (n, 2.0) / 16.0)
            + (-55.0 * Math.pow (n, 4.0) / 32.0);

        /* Precalculate delta_ (Eq. 10.22) */
        delta_ = (151.0 * Math.pow (n, 3.0) / 96.0)
            + (-417.0 * Math.pow (n, 5.0) / 128.0);

        /* Precalculate epsilon_ (Eq. 10.22) */
        epsilon_ = (1097.0 * Math.pow (n, 4.0) / 512.0);

        /* Now calculate the sum of the series (Eq. 10.21) */
        result = y_ + (beta_ * Math.sin (2.0 * y_))
            + (gamma_ * Math.sin (4.0 * y_))
            + (delta_ * Math.sin (6.0 * y_))
            + (epsilon_ * Math.sin (8.0 * y_));

        return result;
    }

    /*
    * MapLatLonToXY
    *
    * Converts a latitude/longitude pair to x and y coordinates in the
    * Transverse Mercator projection.  Note that Transverse Mercator is not
    * the same as UTM; a scale factor is required to convert between them.
    *
    * Reference: Hoffmann-Wellenhof, B., Lichtenegger, H., and Collins, J.,
    * GPS: Theory and Practice, 3rd ed.  New York: Springer-Verlag Wien, 1994.
    *
    * Inputs:
    *    phi - Latitude of the point, in radians.
    *    lambda - Longitude of the point, in radians.
    *    lambda0 - Longitude of the central meridian to be used, in radians.
    *
    * Outputs:
    *    xy - A 2-element array containing the x and y coordinates
    *         of the computed point.
    *
    * Returns:
    *    The function does not return a value.
    *
    */
    function MapLatLonToXY (phi, lambda, lambda0, xy)
    {
        var N, nu2, ep2, t, t2, l;
        var l3coef, l4coef, l5coef, l6coef, l7coef, l8coef;
        var tmp;

        /* Precalculate ep2 */
        ep2 = (Math.pow (sm_a, 2.0) - Math.pow (sm_b, 2.0)) / Math.pow (sm_b, 2.0);

        /* Precalculate nu2 */
        nu2 = ep2 * Math.pow (Math.cos (phi), 2.0);

        /* Precalculate N */
        N = Math.pow (sm_a, 2.0) / (sm_b * Math.sqrt (1 + nu2));

        /* Precalculate t */
        t = Math.tan (phi);
        t2 = t * t;
        tmp = (t2 * t2 * t2) - Math.pow (t, 6.0);

        /* Precalculate l */
        l = lambda - lambda0;

        /* Precalculate coefficients for l**n in the equations below
           so a normal human being can read the expressions for easting
           and northing
           -- l**1 and l**2 have coefficients of 1.0 */
        l3coef = 1.0 - t2 + nu2;

        l4coef = 5.0 - t2 + 9 * nu2 + 4.0 * (nu2 * nu2);

        l5coef = 5.0 - 18.0 * t2 + (t2 * t2) + 14.0 * nu2
            - 58.0 * t2 * nu2;

        l6coef = 61.0 - 58.0 * t2 + (t2 * t2) + 270.0 * nu2
            - 330.0 * t2 * nu2;

        l7coef = 61.0 - 479.0 * t2 + 179.0 * (t2 * t2) - (t2 * t2 * t2);

        l8coef = 1385.0 - 3111.0 * t2 + 543.0 * (t2 * t2) - (t2 * t2 * t2);

        /* Calculate easting (x) */
        xy[0] = N * Math.cos (phi) * l
            + (N / 6.0 * Math.pow (Math.cos (phi), 3.0) * l3coef * Math.pow (l, 3.0))
            + (N / 120.0 * Math.pow (Math.cos (phi), 5.0) * l5coef * Math.pow (l, 5.0))
            + (N / 5040.0 * Math.pow (Math.cos (phi), 7.0) * l7coef * Math.pow (l, 7.0));

        /* Calculate northing (y) */
        xy[1] = ArcLengthOfMeridian (phi)
            + (t / 2.0 * N * Math.pow (Math.cos (phi), 2.0) * Math.pow (l, 2.0))
            + (t / 24.0 * N * Math.pow (Math.cos (phi), 4.0) * l4coef * Math.pow (l, 4.0))
            + (t / 720.0 * N * Math.pow (Math.cos (phi), 6.0) * l6coef * Math.pow (l, 6.0))
            + (t / 40320.0 * N * Math.pow (Math.cos (phi), 8.0) * l8coef * Math.pow (l, 8.0));

        return;
    }

    /*
    * MapXYToLatLon
    *
    * Converts x and y coordinates in the Transverse Mercator projection to
    * a latitude/longitude pair.  Note that Transverse Mercator is not
    * the same as UTM; a scale factor is required to convert between them.
    *
    * Reference: Hoffmann-Wellenhof, B., Lichtenegger, H., and Collins, J.,
    *   GPS: Theory and Practice, 3rd ed.  New York: Springer-Verlag Wien, 1994.
    *
    * Inputs:
    *   x - The easting of the point, in meters.
    *   y - The northing of the point, in meters.
    *   lambda0 - Longitude of the central meridian to be used, in radians.
    *
    * Outputs:
    *   philambda - A 2-element containing the latitude and longitude
    *               in radians.
    *
    * Returns:
    *   The function does not return a value.
    *
    * Remarks:
    *   The local variables Nf, nuf2, tf, and tf2 serve the same purpose as
    *   N, nu2, t, and t2 in MapLatLonToXY, but they are computed with respect
    *   to the footpoint latitude phif.
    *
    *   x1frac, x2frac, x2poly, x3poly, etc. are to enhance readability and
    *   to optimize computations.
    *
    */
    function MapXYToLatLon (x, y, lambda0, philambda)
    {
        var phif, Nf, Nfpow, nuf2, ep2, tf, tf2, tf4, cf;
        var x1frac, x2frac, x3frac, x4frac, x5frac, x6frac, x7frac, x8frac;
        var x2poly, x3poly, x4poly, x5poly, x6poly, x7poly, x8poly;

        /* Get the value of phif, the footpoint latitude. */
        phif = FootpointLatitude (y);

        /* Precalculate ep2 */
        ep2 = (Math.pow (sm_a, 2.0) - Math.pow (sm_b, 2.0))
              / Math.pow (sm_b, 2.0);

        /* Precalculate cos (phif) */
        cf = Math.cos (phif);

        /* Precalculate nuf2 */
        nuf2 = ep2 * Math.pow (cf, 2.0);

        /* Precalculate Nf and initialize Nfpow */
        Nf = Math.pow (sm_a, 2.0) / (sm_b * Math.sqrt (1 + nuf2));
        Nfpow = Nf;

        /* Precalculate tf */
        tf = Math.tan (phif);
        tf2 = tf * tf;
        tf4 = tf2 * tf2;

        /* Precalculate fractional coefficients for x**n in the equations
           below to simplify the expressions for latitude and longitude. */
        x1frac = 1.0 / (Nfpow * cf);

        Nfpow *= Nf;   /* now equals Nf**2) */
        x2frac = tf / (2.0 * Nfpow);

        Nfpow *= Nf;   /* now equals Nf**3) */
        x3frac = 1.0 / (6.0 * Nfpow * cf);

        Nfpow *= Nf;   /* now equals Nf**4) */
        x4frac = tf / (24.0 * Nfpow);

        Nfpow *= Nf;   /* now equals Nf**5) */
        x5frac = 1.0 / (120.0 * Nfpow * cf);

        Nfpow *= Nf;   /* now equals Nf**6) */
        x6frac = tf / (720.0 * Nfpow);

        Nfpow *= Nf;   /* now equals Nf**7) */
        x7frac = 1.0 / (5040.0 * Nfpow * cf);

        Nfpow *= Nf;   /* now equals Nf**8) */
        x8frac = tf / (40320.0 * Nfpow);

        /* Precalculate polynomial coefficients for x**n.
           -- x**1 does not have a polynomial coefficient. */
        x2poly = -1.0 - nuf2;

        x3poly = -1.0 - 2 * tf2 - nuf2;

        x4poly = 5.0 + 3.0 * tf2 + 6.0 * nuf2 - 6.0 * tf2 * nuf2
        	- 3.0 * (nuf2 *nuf2) - 9.0 * tf2 * (nuf2 * nuf2);

        x5poly = 5.0 + 28.0 * tf2 + 24.0 * tf4 + 6.0 * nuf2 + 8.0 * tf2 * nuf2;

        x6poly = -61.0 - 90.0 * tf2 - 45.0 * tf4 - 107.0 * nuf2
        	+ 162.0 * tf2 * nuf2;

        x7poly = -61.0 - 662.0 * tf2 - 1320.0 * tf4 - 720.0 * (tf4 * tf2);

        x8poly = 1385.0 + 3633.0 * tf2 + 4095.0 * tf4 + 1575 * (tf4 * tf2);

        /* Calculate latitude */
        philambda[0] = phif + x2frac * x2poly * (x * x)
        	+ x4frac * x4poly * Math.pow (x, 4.0)
        	+ x6frac * x6poly * Math.pow (x, 6.0)
        	+ x8frac * x8poly * Math.pow (x, 8.0);

        /* Calculate longitude */
        philambda[1] = lambda0 + x1frac * x
        	+ x3frac * x3poly * Math.pow (x, 3.0)
        	+ x5frac * x5poly * Math.pow (x, 5.0)
        	+ x7frac * x7poly * Math.pow (x, 7.0);

        return;
    }

    /*
    * LatLonToUTMXY
    *
    * Converts a latitude/longitude pair to x and y coordinates in the
    * Universal Transverse Mercator projection.
    *
    * Inputs:
    *   lat - Latitude of the point, in radians.
    *   lon - Longitude of the point, in radians.
    *   zone - UTM zone to be used for calculating values for x and y.
    *          If zone is less than 1 or greater than 60, the routine
    *          will determine the appropriate zone from the value of lon.
    *
    * Outputs:
    *   xy - A 2-element array where the UTM x and y values will be stored.
    *
    * Returns:
    *   The UTM zone used for calculating the values of x and y.
    *
    */
    function LatLonToUTMXY (lat, lon, zone, xy)
    {
        MapLatLonToXY (lat, lon, UTMCentralMeridian (zone), xy);

        /* Adjust easting and northing for UTM system. */
        xy[0] = xy[0] * UTMScaleFactor + 500000.0;
        xy[1] = xy[1] * UTMScaleFactor;
        if (xy[1] < 0.0)
		{
          xy[1] = xy[1] + 10000000.0;
		}
        xy[2] = zone + latitude_band(RadToDeg(lat)) + " " + Math.round(xy[0]) + " " + Math.round(xy[1]);
        return zone;
    }

    /*
    * UTMXYToLatLon
    *
    * Converts x and y coordinates in the Universal Transverse Mercator
    * projection to a latitude/longitude pair.
    *
    * Inputs:
    *	x - The easting of the point, in meters.
    *	y - The northing of the point, in meters.
    *	zone - The UTM zone in which the point lies.
    *	southhemi - True if the point is in the southern hemisphere;
    *               false otherwise.
    *
    * Outputs:
    *	latlon - A 2-element array containing the latitude and
    *            longitude of the point, in radians.
    *
    * Returns:
    *	The function does not return a value.
    *
    */
    function UTMXYToLatLon (x, y, zone, southhemi, latlon)
    {
        var cmeridian;

        x -= 500000.0;
        x /= UTMScaleFactor;

        /* If in southern hemisphere, adjust y accordingly. */
        if (southhemi)
        y -= 10000000.0;

        y /= UTMScaleFactor;

        cmeridian = UTMCentralMeridian (zone);
        MapXYToLatLon (x, y, cmeridian, latlon);

        return;
    }

	// User clicks on "<<" button to convert map number to Zone
	function btnToZone_OnClick()
	{
       MapNo = parseInt(document.frmConverter.txtMapNo.value, 10);
	   document.frmConverter.txtZone.value = cfs_map_book[MapNo][0];
	}

	// User clicks on "<<" to convert 6 digit map reference to X, Y coordinates
	function btnToXY_OnClick()
	{
	   MapRef = parseInt(document.frmConverter.txtMapRef.value, 10);
	   //alert(document.frmConverter.txtMapRef.value);
       MapNo = document.frmConverter.txtMapNo.value;
       if (MapNo == "")
	   {
	      alert("Please enter a Map Number");
	   }
	   else
	   {
           document.frmConverter.txtZone.value = cfs_map_book[MapNo][0];
		   // We extract the relevant easting and northing information from the MapRef
		   easting_cut = Math.floor(MapRef/1000)/10;
		   northing_cut = (MapRef - Math.floor(MapRef/1000)*1000)/10;
		   if (easting_cut<50)
		   {
			  easting_offset = cfs_map_book[MapNo][3];
		   }
		   else
		   {
			  easting_offset = cfs_map_book[MapNo][4];
		   }
		   if (northing_cut<50)
		   {
			  northing_offset = cfs_map_book[MapNo][1];
		   }
		   else
		   {
			  northing_offset = cfs_map_book[MapNo][2];
		   }
		   easting = (easting_cut + easting_offset*100)*1000;
		   northing = (northing_cut + northing_offset*100)*1000;
		   //easting = MapRef;
		   //northing = MapNo;
		   document.frmConverter.txtX.value = Math.round(easting);
		   document.frmConverter.txtY.value = Math.round(northing);
		   btnToGeographic_OnClick();
	   }
	}

    function btnToPeakFinderClick()
	{
	  if (document.frmConverter.txtLongitude.value == "" || document.frmConverter.txtLatitude.value == "")
	  {
	     alert("Please enter lat/lon");
	  }
	  else
	  {
		  lat = document.frmConverter.txtLatitude.value;
		  lng = document.frmConverter.txtLongitude.value;
		  urlstring = "https://www.peakfinder.org/?lat=" + lat + '&lng=' + lng + '&cfg=rsm';
		  newwindow=window.open(urlstring,'PeakFinder','height=600,width=800');
		  if (window.focus) {newwindow.focus()}
		  return false;
	  }
	}

    /*
    * btnToUTM_OnClick
    *
    * Called when the btnToUTM button is clicked.
    *
    */
    function btnToUTM_OnClick ()
    {
        var xy = new Array(3);

		// Test for lat,lon entry ( I'm using this order because this is the order used in the lookup tool )
		var lon_and_lat = document.frmConverter.txtLongitude.value.split(",");
		if (!isNaN(lon_and_lat[1]) )
		{
		   document.frmConverter.txtLongitude.value = lon_and_lat[1];
		   document.frmConverter.txtLatitude.value = lon_and_lat[0];
		}

        if (isNaN(ParseDMS(document.frmConverter.txtLongitude.value)))
		{
		   lon = parseFloat (document.frmConverter.txtLongitude.value);
		}
		else
		{
           lon = ParseDMS(document.frmConverter.txtLongitude.value);
		}
		document.frmConverter.txtLongitude.value = lon + "";

        if ((lon < -180.0) || (180.0 <= lon)) {
            alert ("The longitude you entered is out of range.  " +
                   "Please enter a number in the range [-180, 180).");
            return false;
        }

        if (isNaN(ParseDMS(document.frmConverter.txtLatitude.value)))
		{
		   lat = parseFloat (document.frmConverter.txtLatitude.value);
		}
		else
		{
           lat = ParseDMS(document.frmConverter.txtLatitude.value);
		}
		document.frmConverter.txtLatitude.value = lat + "";

        if ((lat < -90.0) || (90.0 < lat)) {
            alert ("The latitude you entered is out of range.  " +
                   "Please enter a number in the range [-90, 90].");
            return false;
        }

        // Compute the UTM zone.
        zone = Math.floor ((lon + 180.0) / 6) + 1;

        zone = LatLonToUTMXY (DegToRad (lat), DegToRad (lon), zone, xy);

        /* Set the output controls.  */
        document.frmConverter.txtX.value = Math.round(xy[0]);
        document.frmConverter.txtY.value = Math.round(xy[1]);
		document.getElementById("UTM_text").innerHTML = " &nbsp; " + xy[2];
        document.frmConverter.txtZone.value = zone;
        if (lat < 0)
            // Set the S button.
            document.frmConverter.rbtnHemisphere[1].checked = true;
        else
            // Set the N button.
            document.frmConverter.rbtnHemisphere[0].checked = true;

	    // move marker
        marker.setLatLng(new L.LatLng(document.getElementById("txtLatitude").value,document.getElementById("txtLongitude").value),{draggable:'true'});
        map.panTo(new L.LatLng(document.getElementById("txtLatitude").value,document.getElementById("txtLongitude").value))
        return true;
    }

    /*
    * btnToGeographic_OnClick
    *
    * Called when the btnToGeographic button is clicked.
    *
    */
    function btnToGeographic_OnClick ()
    {
        latlon = new Array(2);
        var x, y, zone, southhemi;

        if (isNaN (parseFloat (document.frmConverter.txtX.value))) {
            alert ("Please enter a valid easting in the x field.");
            return false;
        }

        x = parseFloat (document.frmConverter.txtX.value);

        if (isNaN (parseFloat (document.frmConverter.txtY.value))) {
            alert ("Please enter a valid northing in the y field.");
            return false;
        }

        y = parseFloat (document.frmConverter.txtY.value);

        if (isNaN (parseInt (document.frmConverter.txtZone.value))) {
            alert ("Please enter a valid UTM zone in the zone field.");
            return false;
        }

        zone = parseFloat (document.frmConverter.txtZone.value);

        if ((zone < 1) || (60 < zone)) {
            alert ("The UTM zone you entered is out of range.  " +
                   "Please enter a number in the range [1, 60].");
            return false;
        }

        if (document.frmConverter.rbtnHemisphere[1].checked == true)
            southhemi = true;
        else
            southhemi = false;

        UTMXYToLatLon (x, y, zone, southhemi, latlon);

        document.frmConverter.txtLongitude.value = Math.round(RadToDeg (latlon[1])*100000)/100000;
        document.frmConverter.txtLatitude.value = Math.round(RadToDeg (latlon[0])*100000)/100000;

	    // move marker
        marker.setLatLng(new L.LatLng(document.getElementById("txtLatitude").value,document.getElementById("txtLongitude").value),{draggable:'true'});
        map.panTo(new L.LatLng(document.getElementById("txtLatitude").value,document.getElementById("txtLongitude").value))
        return true;
    }

	function popup(mylink, windowname)
    {
      if (! window.focus)return true;
      var href;
      if (typeof(mylink) == 'string')
        href=mylink;
      else
        href=mylink.href;
      window.open(href, windowname, 'width=448,height=412,scrollbars=no');
    return false;
    }

    function read_url_variable(q,s)
	{
 	   s = (s) ? s : window.location.search;
	   var re = new RegExp('&amp;'+q+'=([^&amp;]*)','i');
	   return (s=s.replace(/^\?/,'&amp;').match(re)) ?s=s[1] :s='';
    }

	// Parse something like NNN NN NN
	function ParseDMS(input)
	{
       var parts = input.split(" ");
	   //                        D        M         S
       var num = ConvertDMSToDD(parts[0], parts[1], parts[2]);
	   return num;
    }

	function ConvertDMSToDD(deg, minutes, seconds)
	{
      var dd = deg*1.0 + sign(deg)*minutes/60.0 + sign(deg)*seconds/(60.0*60.0);
      return dd;
    }

	function sign(num)
	{
	  return num?num<0?-1:1:0;
	}

	function latitude_band(lat)
	{
	  var bands = ["C","D","E","F","G","H","J","K","L","M","N","P","Q","R","S","T","U","V","W","X"];
	  var i = Math.floor((80.0 + lat) / 8.0);
	  return bands[i];
	}

    //    -->

</SCRIPT>
</HEAD>
<BODY onload="load_map_book()">
<H1>SA Country Fire Service (CFS) - Geographic Coordinate Converter</H1>

<!-- Not really a script, but a message for non-JavaScript browsers -->
<SCRIPT TYPE="text/javascript">
    <!-- -->  <HR>
    <!-- -->  <P ALIGN=center><STRONG>Your browser does not appear to
    <!-- -->  support JavaScript.
    <!-- -->  <BR>Unfortunately, this form will not be useful to you
    <!-- -->  without a browser that supports JavaScript.</STRONG></P>
    <!-- -->  <HR>

    <!--
    if (0 < navigator.userAgent.indexOf ("Opera/3")) {
        document.write ("<HR><P ALIGN=center><BIG>Opera 3.x"
            + " Warning</BIG></P>");
        document.write ("<P>Versions 3.0 through 3.51 of the Opera Web"
            + " browser contain flaws that prevent the hemisphere"
            + " indication and designation from working properly."
            + " It is recommended that you use another browser to"
            + " view and use this page.<HR>");
    }
    //    -->
</SCRIPT>

<table class="main"><tr><td>
You can convert between geographic coordinates and Universal Transverse
Mercator (UTM) coordinates using this form. You will find usage instructions below the map - scroll down.<br>
</td></tr>
<tr><td>
<FORM NAME="frmConverter" onSubmit="0">
<TABLE class="main" BORDER=0 >
<!-- Header row -->
<TR>
<TH COLSPAN=2 ALIGN=center class="utm">Geographic (deg)<BR><EM>(decimal) or (ddd mmm ss)</EM></TH>
<TH ALIGN=center class="utm">To/From</TH>
<TH COLSPAN=2 ALIGN=center class="utm">Map Coordinates<br>(<em>UTM</em>)</TH>
<TH></TH>
<TH COLSPAN=2 ALIGN="center" class="cfs">SA CFS Map Book</TH>
</TR>
<!-- Easting row (plus command button) -->
<!-- The size attribute for the button input keeps the control
     from looking too bad on browsers that don't support buttons
     (even though the control is useless in this case).
     The &gt; code is used for browsers that will interpret the
     first right angle bracket in the VALUE field as the tag
     terminator. -->
<TR>
<TD ALIGN=right class="utm">lon</TD>
<TD class="utm"><INPUT TYPE=text SIZE=15 NAME="txtLongitude" ID="txtLongitude" VALUE="138.59997"></TD>
<TD ALIGN=center class="utm"><INPUT TYPE=button SIZE=4 NAME=btnToUTM VALUE="&gt;&gt;"
    onClick="btnToUTM_OnClick ()"> </TD>
<TD ALIGN=right class="utm">x (easting)</TD>
<TD class="utm"><INPUT TYPE=text SIZE=15 NAME="txtX" VALUE="">  meters (six digits)</TD>
<TD></TD>
<TD colspan=2 class="cfs"></TD>
</TR>

<!-- Northing row (plus command button) -->
<TR>
<TD ALIGN=right class="utm">lat</TD>
<TD class="utm"><INPUT TYPE=text SIZE=15 NAME="txtLatitude" ID="txtLatitude" VALUE="-34.93553"></TD>
<TD ALIGN=center class="utm"><INPUT TYPE=button SIZE=4 NAME=btnToGeographic VALUE="<<"
    onClick="btnToGeographic_OnClick ()"></TD>
<TD ALIGN=right class="utm">y (northing)</TD>
<TD class="utm"><INPUT TYPE=text SIZE=15 NAME="txtY" VALUE=""> meters (seven digits)</TD>
<TD><INPUT TYPE=button SIZE=4 NAME=btnToXY VALUE="&lt;&lt;" onClick="btnToXY_OnClick()"> </TD>
<TD class="cfs">map ref:</TD>
<TD class="cfs"><INPUT TYPE=text SIZE=6 NAME="txtMapRef" VALUE=""> (six digits)</TD>
</TR>

<!-- UTM zone row -->
<TR>
	<!-- <TD COLSPAN=3 class="utm"><a href="http://www.getlatlon.com/" target="ll">Location Search</a>&nbsp;&nbsp;<a href="http://www.geoplaner.com/" target="al">Altitude Search</a></TD> -->
	<TD COLSPAN=3 class="utm">&nbsp;</TD>
<TD ALIGN=right class="utm"><a href="images/atmzones.png" onClick="return popup(this,'utm_zones')">zone</a></TD>
<TD class="utm"><INPUT TYPE=text SIZE=4 NAME="txtZone" VALUE=""><span id="UTM_text"></span></TD>
<TD><INPUT TYPE=button SIZE=4 NAME=btnToZone VALUE="&lt;&lt;" onClick="btnToZone_OnClick()"> </TD>
<TD class="cfs">map num:</TD>
<TD class="cfs"><INPUT TYPE=text SIZE=4 NAME="txtMapNo" VALUE=""></TD>
</TR>

<!-- Hemisphere row -->
<TR>
<TD colspan=3 class="utm" align="center"><INPUT TYPE=button SIZE=4 NAME=btnToPearkFinder VALUE="Peak Finder" onClick="btnToPeakFinderClick()"></TD>
<TD COLSPAN=2 class="utm">
    hemisphere
    <!-- OnClick properties circumvent a Netscape bug that reverses
         the indices of the buttons -->
    <INPUT TYPE=radio NAME="rbtnHemisphere" VALUE="N" OnClick="0">N
    <INPUT TYPE=radio NAME="rbtnHemisphere" VALUE="S" CHECKED OnClick="0">S
</TD>
<TD></TD>
<TD class="cfs" colspan=2></TD>
</TR>
</TABLE>
</FORM>
</td></tr></table>
<br>
<!-- see http://www.putyourlightson.net/projects/coordinates -->
<div id="streetmap" style="width: 900px; height: 700px;"></div>
<script type="text/javascript">
<!--
	// create map and add controls
	var point = [ document.getElementById("txtLatitude").value, document.getElementById("txtLongitude").value ];
	var zoom = 15;
	L.mapbox.accessToken = 'pk.eyJ1IjoiaGFuazMiLCJhIjoiY2todng1eWR3MXEybTJ3bWowdThlNXBhciJ9.mb5TzsWQ02o6V_glh9wx0w';
	var mapboxTiles = L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/outdoors-v11/tiles/{z}/{x}/{y}?access_token=' + L.mapbox.accessToken, {
       attribution: '© <a href="https://www.mapbox.com/feedback/">Mapbox</a> © <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
       tileSize: 512,
       zoomOffset: -1,
       //accessToken: 'pk.eyJ1IjoiaGFuazMiLCJhIjoiY2todndvdWNzMGs3ODJxbWxmNTc5ZXNrdiJ9.0g1URM5PM_Z2uCmgfW2tHA'
       //accessToken: 'pk.eyJ1IjoiaGFuazMiLCJhIjoiY2todng1eWR3MXEybTJ3bWowdThlNXBhciJ9.mb5TzsWQ02o6V_glh9wx0w'
       //accessToken: 'pk.eyJ1IjoiaGRld2l0IiwiYSI6ImNqc21oeTd4ZjAxcWMzeXA5azk2Z3NwczEifQ.yJVEDSC81uSqsbKXB1cDEg'
    });

	var map = L.map('streetmap')
	    .addLayer(mapboxTiles)
	    .setView(point, zoom);

    // Add a marker at the Lat/Lon
    //var circle = L.circle(point, {
    //    color: 'black',
    //    fillColor: '#3374FF',
    //    fillOpacity: 0.5,
    //    radius: 50,
    //    draggable:'true'
    //}).addTo(map);
    var marker = new L.marker(point, { draggable: 'true' })
    marker.on('dragend',
        function(event){
            var marker = event.target;
            var position = marker.getLatLng();
            document.getElementById("txtLatitude").value = Math.round(position.lat*100000)/100000;
            document.getElementById("txtLongitude").value = Math.round(position.lng*100000)/100000;
            marker.setLatLng(new L.LatLng(position.lat, position.lng),{draggable:'true'});
            map.panTo(new L.LatLng(position.lat, position.lng))
        }
    );
    map.addLayer(marker);

//-->
</script>
<div id=explanation style="width:1200px; display:block; text-align:left">
<P>
<I>Geographic coordinates displayed in decimal
degrees.  Negative numbers indicate West longitudes and South
latitudes.  UTM coordinates are entered and displayed in meters.
The ellipsoid model used for computations is WGS84.</I>
<p>
<h3>General Use</h3>
<ul>
<li>You can move the pointer on the map to change the lat/lon in the entry form.</li>
<li>At any time you can press the <b>'&gt;&gt;'</b> button in the <b>To/From</b> column to convert the displayed lat/lon to UTM coordinates.</li>
<li>At any time you can press the <b>'&lt;&lt'</b> button in the <b>To/From</b> column to convert the current dispalyed UIM coordinates to lat/lon.</li>
</ul>
When entering CFS Map Book coordinates into the <b>SA CFS Map Book Input</b> section of the form, using <b>map number</b> and <b>map reference</b> coordinates:
<ul>
<li>Compute the <b>UTM Zone</b> directly from the <b>map number</b> by pressing the <b>'&lt;&lt'</b> to the left of the map number you have entered.
<li>Compute the <b>UTM Easting and Northings</b> by pressing the <b>'&lt;&lt'</b> to the left of the <b>map reference</b> you have entered.
</ul>
The <b>Peak Finder</b> button can be used to see terrain features near the point displayed on the map.
<h3>How to use the 'SA CFS Map Book' Input</h3>
The CFS Map Book states that the preferred method of giving reference is by region, map number, followed by the relevant six figure coordinate or map reference,
i.e. <em>Kangaroo Island, Map 74, 897467</em>.
<p>
The six figure map reference is obtained by:
<ul>
<li>first determining the first three digits along the top of the map, that
is by the two digits directly indicated, and the third digit estimated by interpolation.
<li>then determining the second three digits from the side of the map, that
is by the two digits directly indicated, and the third digit estimated by interpolation.
</ul>
Let's try to determine the map reference for "<em>1.5km North of Middle River Dam, Strepera Waterfall, Kangaroo Island</em>"
. This has a map reference of 897467 on map 74 of the Kangaroo Island map series.
<p>
<ul>
<li>Go to map 74.
<li>The eastings are the grid numbers along the top of the map. You would read "89" directly, and then
interpolate, "7".
<li>The northings are the grid numbers along the side of the map. You would read the "46" directly and interpolate the "7".
<li>This makes a resultant map reference of "89.7 46.7" -> "897467".
<li>Together with the map number "74", you should be able to determine the UTM Zone Number, "53",
and the easting "689700" and northing "6046700" using the tool above.
<li>These three coordinates further translate to a longitude, "138.6218" and latitude "-34.9215".
</ul>
<p>
Another example you can try yourself.
<p>
<ul>
<li>On <a href="point_warna.html" target="_warna">Map 163</a> of the Eyre Peninsula map book, locate <em>Point Warna</em> near the northern part of the coast (near Louth Bay).
<li>Did you get 85.8 and 77.5?
<li>That is 858775
<li>Now convert to eastings/northings, 585800, 6177500. (Hint: Enter the reference '858775' and then the map number '163' and press the <b>'&lt;&lt'</b> button to the left of the reference.)
<li>and finally to lon/lat, 135.93505/-34.54063. (Hint: just click on the <b>'&lt;&lt'</b> button to the left of the easting/northings.)
<li>Hopefully the Map Inset shows the correct location as well.
</ul>
</div>
<p>
The UTMcoordinate conversion part of this program sourced from: <a href="http://home.hiwaay.net/~taylorc/toolbox/geography/geoutm.html">Check Taylor's</a> web site. <br>The SA CFS conversion parameters, painfully extracted, map by map, from the CFS Map Books by Hank de Wit.
<br>
</BODY>
</HTML>